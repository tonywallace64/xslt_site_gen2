<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE html><xhtml:html xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:exslt="http://exslt.org/strings">
  <xhtml:head>
    <xhtml:meta name="Keywords" content=""/>
    <xhtml:title>Add_Website</xhtml:title>
    <xhtml:meta name="viewport" content="width=device-width, initial-scale=1"/>
    <xhtml:style type="text/css">
	  body {color:blue;}  
	  p  {line-height=130%;}
	  h1 {text-align:center;}
	  h2 {text-align:center;}
	  h3 {text-align:center;}
	  pre { color:#800080;}
	  a:link {color:#0000FF;}
	  a:visited {color:#C0C000;}
	  nav {
	    background-image:url(images/grgcleft2.png);
	    position: absolute;
	    top :0px;
	    bottom:0;
	    left: 0;
	    width: 240px;
	    }
	 section {
	    position: relative;
	    margin-left: 250px;
	    }
	</xhtml:style>
  </xhtml:head>
  <xhtml:body>
    <xhtml:div id="navbar"/>
    <xhtml:section>
      <xhtml:a href="index.xhtml">
        <xhtml:img xmlns:xf="http://www.w3.org/2002/xforms" src="images/hw.png" left="250px" width="100%"/>
      </xhtml:a>
      <xhtml:br/>
      <xhtml:p xmlns:ax="abc">
ERRATA: Site rules need to be compiled and put into ebin directory
as part of build procedure.  This is not currently part of make rules
</xhtml:p>
      <xhtml:h1 xmlns:ax="abc">Add Website</xhtml:h1>
      <xhtml:p xmlns:ax="abc">All code in this section is written in Erlang.  The webserver is cowboy.
This page is not intended as a tutorial for either of these, rather
it is intended to explain how to update the Cowboy webserver as used here.</xhtml:p>
      <xhtml:p xmlns:ax="abc">Edit the src/start.erl program and add the url along with the name of the
configuration program.  The current start.erl is shown here for instruction.
</xhtml:p>
      <xhtml:pre xmlns:ax="abc">
<xi:include href="../deps/website_support/src/start.erl" parse="text"/>
</xhtml:pre>
      <xhtml:p xmlns:ax="abc">
The configuration programs are stored siteconf directory.  The purposes
of the siteconf programs are twofold:</xhtml:p>
      <xhtml:ul xmlns:ax="abc">
  <xhtml:li>To separate each site's configuration into a single file pertaining to that site for better code modularity,</xhtml:li>
  <xhtml:li>To define handlers mapping URL's to handlers for that type of resource.</xhtml:li>
</xhtml:ul>
      <xhtml:p xmlns:ax="abc">The handler for this site (which is currently static files only) is shown below.</xhtml:p>
      <xhtml:pre xmlns:ax="abc">
<xi:include href="../deps/website_support/siteconf/tonygenconfig.erl" parse="text"/>
</xhtml:pre>
      <xhtml:p xmlns:ax="abc">The data files need to be copied into the resource directory which is clients/&lt;site_identifier&gt;/webroot/  If this directory does not exist for your site it needs to be made.  The site_identifier must match the path in the site configuration file.  In this case "tonygen"</xhtml:p>
      <xhtml:p xmlns:ax="abc">Now the site needs to be compiled and tested.  Compiling is done by running the command erl -make.</xhtml:p>
      <xhtml:p xmlns:ax="abc">Start the website by running erl and then executing start:go in the development web server's source directory.  If everything is right it should start okay.</xhtml:p>
      <xhtml:p xmlns:ax="abc">Next put an entry into the hosts file "/etc/hosts" to point back to the localhost.  What is done here is to make this a test host as in test.tony.gen.nz 127.0.0.1.  The easiest way to do this is to copy the /etc/hosts to the local directory, edit it there, and copy it back.</xhtml:p>
      <xhtml:p xmlns:ax="abc">Now the website should show in the test webserver</xhtml:p>
      <xhtml:h2 xmlns:ax="abc">Deployment</xhtml:h2>
      <xhtml:p xmlns:ax="abc">The test site has been tested, not the task is to go live.  For a new
website the DNS A record must be changed so that the site can be accessed
by the public.  This is done through your Domain Name supplier's website.</xhtml:p>
      <xhtml:p xmlns:ax="abc">Next an erlang runtime build needs to be generated and deployed.</xhtml:p>
      <xhtml:p xmlns:ax="abc">Building is done with relx by Ninenines.</xhtml:p>
      <xhtml:p xmlns:ax="abc">From here my knowledge gets a bit thin, I will update this section
as I learn more about using tar.gz to install a update.  This will
be necessary when updating the production server.</xhtml:p>
      <xhtml:p xmlns:ax="abc">Prepare server by assigning static-ip in /etc/network/interfaces.
Disable lid switch in /etc/systemd/logind if installing on laptop.</xhtml:p>
      <xhtml:h2 xmlns:ax="abc">Including Static Pages Into the Build</xhtml:h2>
      <xhtml:p xmlns:ax="abc">The build process outlined above relies on <xhtml:em>make</xhtml:em>.  The process is as follows:</xhtml:p>
      <xhtml:ol xmlns:ax="abc">
  <xhtml:li>Build the static site</xhtml:li>
  <xhtml:li>Copy the pages to the client directory of the website support directory</xhtml:li>
  <xhtml:li>Update the release version.  This is in relx.config.  There is some way of using overlays to do this in relx, but I don't know how to do it yet.</xhtml:li>
  <xhtml:li>Make the release directory structure by running "make" in the support directory</xhtml:li>
  <xhtml:li>Copy the static pages into release directory by running "make static-pages in the support directory</xhtml:li>
  <xhtml:li>Make a release by compressing release directory. The release directory is the subdirectory containing the "lib" directory.</xhtml:li>
</xhtml:ol>
    </xhtml:section>
    <xhtml:script>
//  test1
  function writeNavbar(Contents)
  {
  document.getElementById("navbar").innerHTML=Contents;
  };
  function httpGetAsync(theUrl, callback)
  {
    var xmlHttp = new XMLHttpRequest();
    xmlHttp.onreadystatechange = function() { 
        if (xmlHttp.readyState == 4 &amp;&amp; xmlHttp.status == 200)
            callback(xmlHttp.responseText);
    }
    xmlHttp.open("GET", theUrl, true); // true for asynchronous 
    xmlHttp.send(null);
  };
  httpGetAsync(
//
  "admin_nav.xml",writeNavbar);</xhtml:script>
  </xhtml:body>
</xhtml:html>
