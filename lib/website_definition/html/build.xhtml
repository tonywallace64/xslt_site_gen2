<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE html><xhtml:html xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:exslt="http://exslt.org/strings">
  <xhtml:head>
    <xhtml:meta name="Keywords" content=""/>
    <xhtml:title>Building the website</xhtml:title>
    <xhtml:meta name="viewport" content="width=device-width, initial-scale=1"/>
    <xhtml:style type="text/css">
	  body {color:blue;}  
	  p  {line-height=130%;}
	  h1 {text-align:center;}
	  h2 {text-align:center;}
	  h3 {text-align:center;}
	  pre { color:#800080;}
	  a:link {color:#0000FF;}
	  a:visited {color:#C0C000;}
	  nav {
	    background-image:url(images/grgcleft2.png);
	    position: absolute;
	    top :0px;
	    bottom:0;
	    left: 0;
	    width: 240px;
	    }
	 section {
	    position: relative;
	    margin-left: 250px;
	    }
	</xhtml:style>
  </xhtml:head>
  <xhtml:body>
    <xhtml:div id="navbar"/>
    <xhtml:section>
      <xhtml:a href="index.xhtml">
        <xhtml:img xmlns:xf="http://www.w3.org/2002/xforms" src="images/hw.png" left="250px" width="100%"/>
      </xhtml:a>
      <xhtml:br/>
      <xhtml:p>
Once the website static pages are generated, there is a need to
build these pages into a webserver for deployment.  The process
for this is as follows:
  </xhtml:p>
      <xhtml:ol>
<!-- Make these items internal links... -->
<xhtml:li>Ensure there is a site directory in website/clients</xhtml:li>
<xhtml:li>Copy the website data into website/clients/&lt;client&gt;/web_root</xhtml:li>
<xhtml:li>Ensure there is a handler defined in website/siteconf</xhtml:li>
<xhtml:li>Build the website</xhtml:li>
<xhtml:li>Test the build</xhtml:li>
<xhtml:li>Preparing the webserver</xhtml:li>
<xhtml:li>Install</xhtml:li>
</xhtml:ol>
      <xhtml:h3>Writing a siteconf</xhtml:h3>
      <xhtml:p>The following is siteconf file for this website.</xhtml:p>
      <xhtml:pre>
<xi:include href="data/tonygenconfig.erl" parse="text"/>
</xhtml:pre>
      <xhtml:h3>Building a website</xhtml:h3>
      <xhtml:h4>The initial make</xhtml:h4>
      <xhtml:p>The build is started by executing the command:</xhtml:p>
      <xhtml:pre>
  make
</xhtml:pre>
      <xhtml:p>
In the website code directory.</xhtml:p>
      <xhtml:p>This build process uses relx to make an erlang install set.  Including
all runtime libraries, compiled for the current architecture.  After this the
content is then added to the build with the command:</xhtml:p>
      <xhtml:pre>
  make static-pages
</xhtml:pre>
      <xhtml:p>The content added by this command includes:</xhtml:p>
      <xhtml:ul>
  <xhtml:li>Static web pages</xhtml:li>
  <xhtml:li>Installation utilites</xhtml:li>
</xhtml:ul>
      <xhtml:p>At the end of the build process, the release is stored in a directory _rel.</xhtml:p>
      <xhtml:h4>Contents of the makefile</xhtml:h4>
      <xhtml:pre>
        <xi:include href="data/Makefile" parse="text"/>
      </xhtml:pre>
      <xhtml:h4>The installer</xhtml:h4>
      <xhtml:p>The installer puts a script into /etc/init.d/ to start the webserver.
Links to this script are put into the rc&lt;runlevel&gt;.d directories
so that the webserver is started and stopped automatically.  The webserver
is run as a non-priveilaged user for security purposes, the username
for this user being a parameter in the install.  At the time the install
is made the same information is used to make an uninstall script.</xhtml:p>
      <xhtml:h5>install.sh</xhtml:h5>
      <xhtml:pre><xi:include href="data/install.sh" parse="text"/> </xhtml:pre>
      <xhtml:h4>Building for a different system</xhtml:h4>
      <xhtml:h3>Running the build in a test environment</xhtml:h3>
      <xhtml:h4>Testing from a non-graphic build machine</xhtml:h4>
      <xhtml:h3>Running the installer</xhtml:h3>
    </xhtml:section>
    <xhtml:script>
//  test1
  function writeNavbar(Contents)
  {
  document.getElementById("navbar").innerHTML=Contents;
  };
  function httpGetAsync(theUrl, callback)
  {
    var xmlHttp = new XMLHttpRequest();
    xmlHttp.onreadystatechange = function() { 
        if (xmlHttp.readyState == 4 &amp;&amp; xmlHttp.status == 200)
            callback(xmlHttp.responseText);
    }
    xmlHttp.open("GET", theUrl, true); // true for asynchronous 
    xmlHttp.send(null);
  };
  httpGetAsync(
//
  "main_nav.xml",writeNavbar);</xhtml:script>
  </xhtml:body>
</xhtml:html>
