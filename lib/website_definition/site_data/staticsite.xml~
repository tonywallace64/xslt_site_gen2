<!--
File:     staticsite.xml
Author:   Tony Wallace
Purpose:  Document how static sites are generated by this software
Usage:    This is a topic which becomes a single page in the website.
          This file is intended to be imported into pagedata.xml as
	  part of the site production process.
Notes:    As this file is intended for inclusion into another xml document
          it does not have an xml directive.

-->
<page 
    xmlns:xhtml="http://www.w3.org/1999/xhtml"  
    xmlns:ax="abc" 
    xmlns:xi="http://www.w3.org/2001/XInclude"
    schema="site.rnc">
<name >static site</name>
<title >static site</title>
<source>static.xml</source>
<url >static.xhtml</url>
<keywords >xml</keywords>
<pageheader >Greenrose</pageheader>
<content>
<xhtml:h2>Why  build a site this way?</xhtml:h2>
<xhtml:p>In this lesson we will build a site with static content
using the tools we have learnt thus far.  Why do it this way?
A website can be viewed as an organised collection of pages. 
Editing pages on an adhoc basis can lead to inconsistency
between pages.  This is partially overcome using shared css 
stylesheets, however this does not model the relationship 
between the pages.  Xml can model the relationship between
the web pages, be they nested or disjoint sets.</xhtml:p>
<xhtml:p>XSLT has been chosen as a templating tool (in preference
to more modern and widely accepted standards such as django) because
it is part of multimedia tool kitsnthat allow the production
of other media formats such as pdf.  This is important in connection
with publishing as I am also a director for a publishing company.  I
had intended to style with XSL-FO in preference for CSS for the same
reason but at the time I built this site I deferred XSL-FO as
I had enough to learn at the time, and figured it could be
retrofitted relatively easily.</xhtml:p>
<xhtml:h2 >This site master file: pagedata.xml</xhtml:h2>
<xhtml:pre ><xi:include  parse="text" href="pagedata.xml"></xi:include></xhtml:pre>
<xhtml:h2>This page definition</xhtml:h2>

<xhtml:p>This is the definition for this page.  Everything about this
page, its name, its url and all other things required for its
generation are stored here...</xhtml:p>
<xhtml:h2 >staticsite.xml</xhtml:h2>
<xhtml:pre><xi:include href="staticsite.xml" parse="text"/></xhtml:pre>

<xhtml:h2 >An XSLT utility file: ajw_utils.xsl</xhtml:h2>
<xhtml:p>
This is one of two files for converting this site data into html.
</xhtml:p>
<xhtml:pre ><xi:include  parse="text" href="ajw_utils.xsl"></xi:include></xhtml:pre><xhtml:h2 >XSLT file to generate HTML</xhtml:h2>
<xhtml:p>
This file, <xhtml:em>make_web.xsl</xhtml:em> generates each web page including navigation bar.
</xhtml:p>
<xhtml:pre>
<xi:include  href="make_web.xsl" parse="text"></xi:include>
</xhtml:pre>
<xhtml:h2>Extra functionality from a SAX parser</xhtml:h2>
<xhtml:p>During construction it was found that the xmllint
xinclude did not work properly with the parse="text" attribute.
It was also required to find a way to split up the site into
separate html pages and to store and save into these pages
processing instructions.</xhtml:p>
<xhtml:p>These functions were built using the erlsom SAX parser
and custom erlang programming.  The disadvantage of going
to SAX and erlang compared to using XSLT is obvious, the
program is much longer. However the advantage is that
using a general purpose language like erlang allows complete
flexibility.</xhtml:p>  
<xhtml:p>Finally, there is a significant amount of code dedicated
to self testing.</xhtml:p>
<xhtml:p>This code is shown here.  <xhtml:em>xslt_extn.erl</xhtml:em></xhtml:p>
<xhtml:pre>
<xi:include href="../src/xslt_extn.erl" parse="text" />
</xhtml:pre>
<xhtml:h2 >A build script to put it all together</xhtml:h2>
<xhtml:pre >
<![CDATA[
cd site_data
escript ../ebin/xslt_extn.beam < pagedata.xml > fullsite.xml 2> errors.txt
xsltproc ../src/make_web2.xsl fullsite.xml > allpages.xml
escript ../ebin/xslt_extn.beam +finaloutput < allpages.xml 
mv *.html ../html
]]>
</xhtml:pre>
<xhtml:p>The first call to xslt_extn includes all the page
definitions in pagedata.xml creating the file fillsite.xml.
This data is then put through xslt processing to form a
new file allpages.xml.  This file has all the webpages
properly laid out, but all in a single file.  xslt_extn
is called again to split these files and output the
processing instructions into the web pages.  Finally
these html web pages are copied to the websites html directory.
</xhtml:p>
</content>
</page>
